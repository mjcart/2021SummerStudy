#include<iostream>

using namespace std;

int main() {
	int l;
	int s[50] = { 0, };
	int n;
	cin >> l;
	for (int i = 0; i < l; i++) {
		cin >> s[i];
	}
	//입력받은 집합 정렬
	for (int i = 0; i < l-1; i++) {
		for (int j = i+1; j < l ; j++) {
			if (s[i] > s[j]) {
				int buffer = s[i];
				s[i] = s[j];
				s[j] = buffer;
			}
		}
	}
	cin >> n;
	int checkpoint;
	//원소가 하나일 경우
	if (l == 1) {
		//n이 작은 경우
		if (n - s[0] < 0) {
			int smaller = n - 1;
			int larger = s[0] - n - 1;
			cout << smaller * larger + smaller + larger;
			return 0;
		}
		//n이 큰 경우
		else if (n - s[0] > 0) {
			int smaller = n - s[0] - 1;
			int larger = 1000 - n - 1;
			cout << smaller * larger + smaller + larger;
			return 0;
		}
		//같은 경우
		else {
			cout << '0';
			return 0;
		}
	}
	//입력 n이 집합 원소 중 가장 작은경 우
	if (n < s[0]) {
		int smaller = n - 1;
		int larger = s[0] - n - 1;
		cout << smaller * larger + smaller + larger;
		return 0;
	}
	//입력 n이 집합 원소 중 가장 큰 경우
	else if (n > s[l - 1]) {
		int smaller = n - s[0] - 1;
		int larger = 1000 - n - 1;
		cout << smaller * larger + smaller + larger;
		return 0;
	}
	//입력 n이 집합 원소 사이에 있을 경우 checkpoint에 index저장
	for (int i = 0; i < l; i++) {
		if (n == s[i]) {
			cout << '0';
			return 0;
		}
		if (n > s[i]) {
			if (n < s[i + 1]) {
				checkpoint = i;
				break;
			}
		}		
	}
	//알고리즘으로 계산 및 출력
	int smaller = n - s[checkpoint] - 1;
	int larger = s[checkpoint + 1] - n - 1;
	cout << smaller * larger + smaller + larger;
	return 0;
}